###################################

#simple function to calculate the coefficients of EIV regression
# along with the predicted values (not the scores)

calcx.tls = function(Adat, Bdat) {
   n = NCOL(Adat)
   k = NCOL(Bdat)
   res.svd = svd( cbind(Adat, Bdat))
   coefs = -res.svd$v[1:n,(n+1):(n+k)] %*% solve(res.svd$v[(n+1):(n+k),(n+1):(n+k)])
  pred = Adat %*% coefs
   list(coefs=coefs, pred=pred)}

xs = (-5):5

#the next step guarantees that the same random numbers can be generated by the reader
set.seed(12345)

#generate 11 values for Y = .5*X + e and center at zero
ys = .5*xs + 2*rnorm(11)
ys=ys-mean(ys)


#calculate OLS regression
ols.reg = lm(ys~xs)
 coef(ols.reg)[2] # 0.3150951
y.pred = predict(ols.reg)

#fit EIV/TLS
y.tls = calcx.tls(xs,ys)
b.slope = y.tls$co
b.slope # .376517
x.score = (ys +xs/b.slope)/(b.slope + 1/b.slope)
y.score = b.slope * x.score
x.score = (ys +xs/b.slope)/(b.slope + 1/b.slope)
y.score = b.slope * x.score

##  Are the "errors" unrelated?
cor(xs-x.score,ys-y.score) # [1] -1

#ratio of f to e errors
(xs-x.score)/(ys-y.score) #  -0.376517 repeated 11 times = negative of slope of EIV regression

#fit "inverse regression", i.e. X = b*Y (used later next in plot)
reg.inv = lm(xs~ys)
 coef(reg.inv)[2] # 1.118269 
 1/coef(reg.inv)[2] # 0.8942392

#######################
###make plots
par(mfrow=c(2,1))

#OLS plot
plot(xs,ys,asp=1,pch=20,main="Plot of Points and OLS Regression LIne",xlab = "X variable", ylab= "Y Variable")
 points(xs,y.pred,col="red",cex=.8,pch=20)
abline(a=0,b=coef(ols.reg)[2])
 segments(xs,ys,xs,y.pred,col="orange",lwd=2)

#EIV plot
plot(xs,ys,asp=1,pch=20,main="Plot of Points and EIV Regression LIne",xlab = "X variable", ylab= "Y Variable")
 points(x.score,y.score,col="red",cex=.8,pch=20)
abline(a=0,b=b.slope)
 segments(xs,ys,x.score,y.score,col="orange",lwd=2)
 segments(xs[6],ys[6],x.score[6],ys[6],col="green",lwd=2)
 segments(x.score[6],ys[6],x.score[6],y.score[6],col="green",lwd=2)

par(mfrow=c(1,1))

#############################

#function for testing changes in scale
# change scale for ys observe effects

check.scale = function(scale.vals,xvals=xs,yvals=ys) {
   val.len = length(scale.vals)
   newslopes = rep(NA,val.len)
   b.slope = calcx.tls(xvals,yvals)$co
 for (i in 1:val.len) newslopes[i] = calcx.tls(xvals,scale.vals[i]*yvals)$co/(b.slope*scale.vals[i])
  names(newslopes) = scale.vals
  plot(scale.vals,newslopes, type="l",main = "Effect of Scaling",xlab = "Scale Factor",ylab = "Resulting Change")
  abline(h=1,col="red")
  newslopes}

 test = check.scale(seq(.1,20,.1)) 
  abline(h= coef(ols.reg)[2]/b.slope,col="green")
  abline(h= (1/coef(reg.inv)[2])/b.slope,col="blue")
  abline(v=1,col="red")
  text(10,.9,"Green Line at OLS slope / EIV slope")
  text(13,2.2,"Blue Line at (1 / Inverse OLS slope) / EIV slope")

#####################

#what  happens when both variables are scaled to unit variance?

calcx.tls(scale(xs),scale(ys))$co #[1,]    1  always + or - 1

########################

#do multilinear TLS on 20000 uncorrelated observation.
#all coefficients should be equal to 0

set.seed(121321415)


xmatrix = scale(matrix(rnorm(100000),nrow=20000,ncol=5))
yvector = scale(rnorm(20000))

calcx.tls(xmatrix,yvector)$co
#         [,1]
#[1,] 1.9253757
#[2,] 1.8661962
#[3,] 3.7607298
#[4,] 0.6509362
#[5,] 4.4236177

big.reg = lm(yvector~.,data.frame(xmatrix))

coef(big.reg)[-1]
#          X1           X2           X3           X4           X5 
# 0.005969581  0.010657532 -0.005656248 -0.003537972  0.003616522 

confint(big.reg) #confidence intervals for coefficients of OLS
#                   2.5 %      97.5 %
#(Intercept) -0.013860175 0.013860175
#X1          -0.007891376 0.019830537
#X2          -0.003203515 0.024518580
#X3          -0.019519901 0.008207406
#X4          -0.017398859 0.010322916
#X5          -0.010247525 0.017480569

#######################################

## 
#load temperature and proxy time series

csm.prox59 = dget(url("http://statpad.files.wordpress.com/2010/12/csmprox59.doc"))
csm.nh = dget(url("http://statpad.files.wordpress.com/2010/12/csmnh.doc"))

calprox = window(csm.prox59,start = 1856)
caltemp = window(csm.nh,start = 1856)
caltemp = caltemp - mean(caltemp)


csm.tls = calcx.tls(calprox,caltemp)
csm.crec = ts(csm.prox59 %*% csm.tls$co,start=850)
csm.ftls = calcx.tls(calprox,1.8*caltemp)
csm.frec = ts(csm.prox59 %*% csm.ftls$co,start=850)
csm.sctls = calcx.tls(calprox,scale(caltemp))
csm.screc = ts(csm.prox59 %*% csm.sctls$co,start=850)


par(mfrow=c(2,1))

plot(csm.crec-csm.frec/1.8, main = "Difference in Reconstructions C - F",ylab ="Degrees C", xlab="Year")
plot(csm.crec-csm.screc*sd(caltemp),main = "Difference in Reconstructions C - Scaled Temp",ylab ="Degrees C", xlab="Year")

par(mfrow=c(1,1))



